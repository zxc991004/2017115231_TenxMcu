C51 COMPILER V9.60.0.0   ISR                                                               01/02/2020 18:42:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN isr.OBJ
COMPILER INVOKED BY: D:\SIngelChip\Keil_C51\C51\BIN\C51.EXE isr.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //=============================================================================
   2          // Name   :isr.c
   3          // Purpose  :Interrupt Service Routines
   4          //=============================================================================
   5          #define __isr_c
   6          
   7          #include "includeAll.h"
   8          //=============================================================================
   9          // Function:  void INT0_int(void)
  10          // Purpose: INT0 pin interrupt vector
  11          // Input: none
  12          // OutPut:  none
  13          // Author:
  14          //=============================================================================
  15          void INT0_int(void) interrupt 0 {
  16   1        IE0 = 0; // clear interrupt flag
  17   1      }
  18          //=============================================================================
  19          // Function:  void TIMER0_int(void)
  20          // Purpose: TIMER0 interrupt vector
  21          // Input: none
  22          // OutPut:  none
  23          // Author:
  24          //=============================================================================
  25          void TIMER0_int(void) interrupt 1 {
  26   1        TF0 = 0; // clear interrupt flag
  27   1        //------------
  28   1        time++;//1ms
  29   1        F_buzz();
  30   1        if(time == 50)
  31   1        {
  32   2          //p1_5 = 1;
  33   2          time = 0;
  34   2          TR0 = 0;
  35   2        }
  36   1      }
  37          //=============================================================================
  38          // Function:  void INT1_int(void)
  39          // Purpose: INT1 pin interrupt vector
  40          // Input: none
  41          // OutPut:  none
  42          // Author:
  43          //=============================================================================
  44          void INT1_int(void) interrupt 2 {
  45   1        IE1 = 0; // clear interrupt flag
  46   1      }
  47          //=============================================================================
  48          // Function:  void TIMER1_int(void)
  49          // Purpose: TIMER1 interrupt vector
  50          // Input: none
  51          // OutPut:  none
  52          // Author:
  53          //=============================================================================
  54          void TIMER1_int(void) interrupt 3 {
  55   1        TF1 = 0; // clear interrupt flag
C51 COMPILER V9.60.0.0   ISR                                                               01/02/2020 18:42:26 PAGE 2   

  56   1      }
  57          //=============================================================================
  58          // Function:  void UART_int(void)
  59          // Purpose: UART interrupt vector
  60          // Input: none
  61          // OutPut:  none
  62          // Author:
  63          //=============================================================================
  64          void UART_int(void) interrupt 4 {
  65   1        TI = 0; // clear interrupt flag
  66   1        RI = 0; // clear interrupt flag
  67   1      }
  68          //=============================================================================
  69          // Function:  void TIMER2_int(void)
  70          // Purpose: TIMER2 interrupt vector
  71          // Input: none
  72          // OutPut:  none
  73          // Author:
  74          //=============================================================================
  75          void TIMER2_int(void) interrupt 5 {
  76   1        TF2 = 0; // clear interrupt flag
  77   1        b1ms = 1;
  78   1        vData++;
  79   1        if (vData == 0xff) {
  80   2          vData = 0;
  81   2        }
  82   1      }
  83          //=============================================================================
  84          // Function:  void TIMER3_int(void)
  85          // Purpose: TIMER3 interrupt vector
  86          // Input: none
  87          // OutPut:  none
  88          // Author:
  89          //=============================================================================
  90          void TIMER3_int(void) interrupt 7 { INTFLG &= ~TF3; }
  91          //=============================================================================
  92          // Function:  void P1_int(void)
  93          // Purpose: P1 pin interrupt vector
  94          // Input: none
  95          // OutPut:  none
  96          // Author:
  97          //=============================================================================
  98          void P1_int(void) interrupt 8 { INTFLG &= ~P1IF; }
  99          //=============================================================================
 100          // Function:  void INT2_int(void)
 101          // Purpose: INT2 pin interrupt vector
 102          // Input: none
 103          // OutPut:  none
 104          // Author:
 105          //=============================================================================
 106          void INT2_int(void) interrupt 9 { INTFLG &= ~IE2; }
 107          //=============================================================================
 108          // Function:  void ADC_TK_int(void)
 109          // Purpose: ADC&TOUCHKEY interrupt vector
 110          // Input: none
 111          // OutPut:  none
 112          // Author:
 113          //=============================================================================
 114          void ADC_TK_int(void) interrupt 10 {
 115   1        INTFLG &= ~ADIF;
 116   1        INTFLG &= ~TKIF;
 117   1        TKCON2 &= ~TKAUTO; // disable touch key auto scan
C51 COMPILER V9.60.0.0   ISR                                                               01/02/2020 18:42:26 PAGE 3   

 118   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     87    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
